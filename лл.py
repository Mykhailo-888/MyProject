import random
import functools

# üîπ –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è: –ø–æ–≤–µ—Ä—Ç–∞—î –∫–æ—Ä—Ç–µ–∂ —ñ–∑ 10 –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö —á–∏—Å–µ–ª
def func():
    """–ü–æ–≤–µ—Ä—Ç–∞—î –∫–æ—Ä—Ç–µ–∂ –∑ 10 –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö —Ü—ñ–ª–∏—Ö —á–∏—Å–µ–ª –≤—ñ–¥ 0 –¥–æ 100."""
    return tuple(random.randint(0, 100) for _ in range(10))

# üîπ –î–µ–∫–æ—Ä–∞—Ç–æ—Ä: –∑–∞–º—ñ–Ω—é—î –≤—Å—ñ –Ω–µ-–∫—Ä–∞—Ç–Ω—ñ 2 –Ω–∞ None, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ map + lambda
def map_decorator(func):
    """–ó–∞–ª–∏—à–∞—î —á–∏—Å–ª–∞, –∫—Ä–∞—Ç–Ω—ñ 2, –≤—Å—ñ —ñ–Ω—à—ñ –∑–∞–º—ñ–Ω—é—î –Ω–∞ None."""
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        result = func(*args, **kwargs)
        transformed = tuple(map(lambda x: x if x % 2 == 0 else None, result))
        return transformed
    return wrapper

# üîπ –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä
@map_decorator
def filtered_func():
    """–í–∏–ø–∞–¥–∫–æ–≤—ñ —á–∏—Å–ª–∞, —Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ –∑–∞ –∫—Ä–∞—Ç–Ω—ñ—Å—Ç—é 2."""
    return func()

# üî∏ –¢–µ—Å—Ç
original = func()
filtered = filtered_func()

print("–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ —á–∏—Å–ª–∞:")
print(original)

print("\n–ü—ñ—Å–ª—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ (–∑–∞–ª–∏—à–µ–Ω–æ –ª–∏—à–µ —Ç—ñ, —â–æ % 2 == 0):")
print(filtered)